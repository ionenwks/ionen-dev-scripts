#!/usr/bin/env bash
# basic/common functions for internal use (no API guarantees)
[[ ! -v _COMMON_BASHLIB[1] ]] || return 0; _COMMON_BASHLIB[1]=

# init
#	Initiate basic settings / traps / check minimum bash version
#	Some functions may not work as expected if skipped.
unset _COMMON_INIT
init() {
	(( BASH_VERSINFO[0] >= 6 || ( BASH_VERSINFO[0] == 5 && BASH_VERSINFO[1] >= 1 ) )) \
		|| die "minimum bash version 5.1 required (current: ${BASH_VERSION})"

	set +m -Efuo pipefail
	shopt -s lastpipe nullglob

	trap '
		case ${?} in
			166) (( BASH_SUBSHELL )) && exit 166 || exit 0;;
			167) (( BASH_SUBSHELL )) && exit 167 || exit 1;;
		esac' ERR

	: @eprefix@ "${EPREFIX=}"
	: "${ROOT=}"; ROOT=${ROOT%/}
	: "${EROOT=${ROOT}${EPREFIX:-}}"; EROOT=${EROOT%/}
	export ROOT EROOT EPREFIX

	_COMMON_INIT=
}

# absdir <variable> [dir]
#	Get normalized absolute path for [dir] then store in <variable> without
#	trailing slash. If [dir] is unspecified, read path from <variable>.
#	Return 1 if not a dir or can't cd to it, die on unexpected issues.
absdir() {
	[[ -d ${PWD} ]] || die "working directory '${PWD}' is invalid, can't resolve relative paths"
	local -n outref=${1}
	[[ -d ${2-${outref}} ]] && pushd "${2-${outref}}" >/dev/null || return 1
	outref=${PWD}
	popd >/dev/null || die
}

# depend <executables...>
#	Check for executables availability to die early if any missing.
depend() {
	type "${@}" >/dev/null || die "missing dependencies"
}

# die [message]
#	Exit with [message] by calling `end 1`.
#	If no message, display generic error with failed line and backtrace.
die() {
	local errno=${?}
	(( errno > 1 )) || errno=

	echo "Error: ${*:-unexpected issue happened at the following} (${0##*/}:${FUNCNAME[1]}:${BASH_LINENO[0]})${errno:+ (errno:${errno})}" >&2

	if (( ! ${#} )); then
		local i
		showline ${BASH_LINENO[0]} "${BASH_SOURCE[1]}" '  %03d: %s' >&2
		for ((i=1; i < ${#FUNCNAME[@]}; i++)); do
			printf "%-$((i*4-2))s^^^ %s\n" '' "${FUNCNAME[i]}:${BASH_LINENO[i-1]}" >&2
		done
	fi

	end 1
}

# end [01]
#	Exit with [01] (default:0, usable in non-masked subshells with init())
#	If hook_end is defined, will run before exiting.
#	Note: about mask, works for `(var=$(end))`, but does not for `cat <(end)`
#	or `local var=$(end)` as the return value is replaced by cat/local's.
end() {
	! declare -f hook_end &>/dev/null || hook_end
	[[ -v _COMMON_INIT ]] || exit "${1:-0}"
	(( BASH_SUBSHELL )) && exit "$((166+${1:-0}))" || exit "${1:-0}"
}

# err <message>
#	Print error message to stderr
err() {
	echo "Error: ${*} (${0##*/})" >&2
}

# esanitize
#	Try to sanitize environment when run through ebuilds with bashrc
esanitize() {
	# some ebuilds set this and cause q* tools to emit debug messages
	unset DEBUG

	# remove */ebuild-helpers* from PATH to ensure functioning portageq
	while [[ ${PATH} =~ (:|^)([^:]+/ebuild-helpers[^:]*)(:|$) ]]; do
		PATH=${PATH/"${BASH_REMATCH[0]}"/${BASH_REMATCH[1]:+${BASH_REMATCH[3]:+:}}}
	done
}

# getoptw [[-n] <variable> <array> <short> <long> <args...>] (depend:getopt)
#	Wrapper to external getopt(1), only initial call takes arguments.
#	<short> and <long> are getopt(1)'s -o and -l options.
#	If no arguments, set named <variable> to next option with each call.
#	If reach --, set named <array> to remaining options.
#	Return 1 when no options left.
#	Dies if invalid options passed unless -n.
unset _COMMON_SETOPT
getoptw() {
	if (( ${#} )); then
		local getopt
		: @getopt@ "${getopt:=getopt}"
		depend "${getopt}"

		local invalid=false
		if [[ ${1} == -n ]]; then
			invalid=true
			shift
		fi
		eval "_COMMON_SETOPT=($("${getopt}" -o "${3}" -l "${4}" -- "${@:5}"))
			(( ! ${?} ))" || ${invalid} || die "invalid arguments"
		declare -gn _COMMON_SETOPT_V=${1}
		declare -gn _COMMON_SETOPT_A=${2}
		declare -gi _COMMON_SETOPT_P=0
		_COMMON_SETOPT_A=()
		return 0
	fi

	[[ -v _COMMON_SETOPT ]] || return 1

	if (( _COMMON_SETOPT_P >= ${#_COMMON_SETOPT[@]} )); then
		unset _COMMON_SETOPT{,_A,_V}
		return 1
	fi

	if [[ ${_COMMON_SETOPT[_COMMON_SETOPT_P]} == -- ]]; then
		(( ++_COMMON_SETOPT_P >= ${#_COMMON_SETOPT[@]} )) \
			|| _COMMON_SETOPT_A=("${_COMMON_SETOPT[@]:${_COMMON_SETOPT_P}}")
		unset _COMMON_SETOPT{,_V}
		unset -n _COMMON_SETOPT{_V,_A}
		return 1
	fi

	_COMMON_SETOPT_V=${_COMMON_SETOPT[_COMMON_SETOPT_P++]}
}

# hasharray [+]<associative-array> <array>
#	Set <array> as keys with empty values into <associative-array>
#	(for non-glob -v searching). Empty array elements are ignored.
#	If no +, also resets.
hasharray() {
	local -n _c_inref=${2} _c_outref=${1#+}
	local _c_elem
	declare -p "${!_c_outref}" &>/dev/null || declare -gA "${!_c_outref}"
	[[ ${1::1} == + ]] || _c_outref=()
	for _c_elem in "${_c_inref[@]}"; do
		[[ ${_c_elem} ]] && _c_outref[${_c_elem}]= #!SC2004,SC2034
	done
}

# include <files...>
#	Include files from current bashlib dir, exit on failure
include() {
	while (( ${#} )); do
		. "${BASH_SOURCE[0]%/*}/${1}.bashlib" || exit 1 #!SC1090
		shift
	done
}

# map [+]<array>
#	Basic wrapper to mapfile using -t by default.
#	If + is set, add to array rather than replace it.
map() {
	if [[ ${1::1} == + ]]; then
		local -n _c_inref=${1#+}
		mapfile -t -O ${#_c_inref[@]} "${1#+}"
	else
		mapfile -t "${1}"
	fi
}

# msg <message> [extra-lines]
#	Echoes message based on setmsg() defaults, multiple arguments
#	will output on separate lines.
msg() {
	printf -- "${_COMMON_MSG_FMT}\n" "${@}" >&"${_COMMON_MSG_STD}"
}

# msgf <format> [args]
#	Like msg(), but with a printf formatted string.
msgf() {
	local msg
	printf -v msg -- "${@}"
	printf -- "${_COMMON_MSG_FMT}" "${msg}" >&"${_COMMON_MSG_STD}"
}

# optstart
#	Setup O and C associative arrays (option/colors), and CONFDIRS array.
#	Usage:
#		optstart <<-EOO
#			name=type:default (type = bool, float(int*100), int, str)
#			short|!name=type:default (short| and ! optional for optauto())
#			...
#		EOO
#		optset <key> <val> (override default with arguments, used over configs)
#		optsetconf <dir> (override default CONFDIRS by <dir> if needed)
#		optend (load configs and normalize arrays for usage)
#	Alternatively, optauto <<-EOO... does all of the above combined.
#	After optend(), e.g. ${O[boolname]} = true, ${C[g]} = green ansi color
#	Note: include c|!color=bool:true to enable C array / colormap
optstart() {
	_COMMON_OPT_SORT=()
	declare -gA O C _COMMON_OPT _COMMON_OPT_NO _COMMON_OPT_SHORT _COMMON_OPT_SHORT_R

	local l key opt
	while IFS= read -r l; do
		opt=${l%%=*}
		key=${opt#*|}
		key=${key#!}

		if [[ ${opt} =~ '!' ]]; then
			_COMMON_OPT_NO[${key}]= #!SC2034
		fi

		if [[ ${opt} =~ '|' ]]; then #!SC2076
			key=${key#*|}
			_COMMON_OPT_SHORT[${key}]=${l::1}
			_COMMON_OPT_SHORT_R[${l::1}]=${key}
		fi

		_COMMON_OPT_SORT+=("${key}")
		_COMMON_OPT[${key}]=${l#*=}
	done
	_COMMON_OPT_SORT+=(colormap)
	_COMMON_OPT[colormap]="colormap:a90 r31 g32 y33 b34 m35 c36 la37 lr91 lg92 ly93 lb94 lm95 lc96 w97 n0"

	set -- \
		"@confdir@" \
		"${0%/*}/../config" \
		"${XDG_CONFIG_HOME:-${HOME}/.config}/@package@"
	declare -ga CONFDIRS=()
	while (( ${#} )); do
		[[ ! -d ${1} ]] || CONFDIRS+=("${1}")
		shift
	done
}

# optset <key> <value> [-c]
#	Set O[<key>] to <value> after sanity checks, die on error, see optstart().
#	-c indicates set from a config file and will not override non-default/-c
optset() {
	local isset='%' type=${_COMMON_OPT[${1}]%%:*} val

	if [[ ${3:-} == -c ]]; then
		[[ ${type} != %* ]] || return 0
		isset='@'
	fi
	type=${type#[%@]}

	case ${type} in
		bool)
			case ${2,,} in
				1|enable|true|yes|y) val=true;;
				0|disable|false|no|n) val=false;;
			esac
		;;
		colormap)
			local -a colormap
			split colormap "${2}"
			printf -v val 'a%d r%d g%d y%d b%d m%d c%d la%d lr%d lg%d ly%d lb%d lm%d lc%d w%d n%d' \
				"${colormap[@]}" 2>/dev/null || unset val
		;;
		float)
			printf -v val '%.2f' "${2%\%}" 2>/dev/null \
				&& printf -v val '%.0f' "${val}e+2" 2>/dev/null \
				|| unset val
		;;
		int)
			printf -v val '%d' "${2}" 2>/dev/null || unset val
		;;
		str) val=${2};;
		ignore) return 0;;
		*) die;;
	esac

	[[ -v val ]] || die "unrecognized value '${2}' for option '${1}', expected ${type}"

	_COMMON_OPT[${1}]=${isset}${type}:${val}
}

# optsetconf <dir>
#	Override CONFDIRS to use <dir> or die if not a directory, see optstart().
optsetconf() {
	[[ -d ${1} ]] || die "configuration directory '${1}' is not a directory"
	CONFDIRS=("${1}")
}

# optend [-d]
#	See optstart()
#	If -d is specified, dump configuration using std out from setmsg() then
#	exit (usable as .conf)
optend() {
	local file l key val

	for file in "${CONFDIRS[@]/%//${0##*/}.conf}"; do
		[[ -e ${file} ]] || continue
		while IFS= read -r l; do
			[[ ! ${l} =~ ^# ]] || continue
			[[ ${l} =~ ^[[:space:]]*([a-z-]+)[[:space:]]*=[[:space:]]*([^#]*) ]] \
				|| die "could not parse line from '${file}': ${l}"

			key=${BASH_REMATCH[1]}
			val=${BASH_REMATCH[2]%"${BASH_REMATCH[2]##*[![:space:]]}"}
			val=${val//[\"\'\\]/} #"]}#vim

			[[ ${_COMMON_OPT[${key}]:-} =~ : ]] || die "invalid option in '${file}': ${key}"

			optset "${key}" "${val}" -c
		done < "${file}" || die "failed to read '${file}'"
	done

	if [[ ${1:-} == -d ]]; then
		echo "# ${0##*/}.conf (from \`${0##*/} --dumpconfig\`, see --help for info)" >&"${_COMMON_MSG_STD:-1}"
		for key in "${_COMMON_OPT_SORT[@]}"; do
			[[ ! ${_COMMON_OPT[${key}]} =~ ^[%@]?ignore:? ]] || continue

			[[ ${_COMMON_OPT[${key}]} =~ ^[%@] ]] && l= || l='#'

			if [[ ${_COMMON_OPT[${key}]} =~ ^[%@]?float: ]]; then
				printf -v "_COMMON_OPT[${key}]" "%.2f" "${_COMMON_OPT[${key}]#*:}e-2"
			fi

			if [[ ${key} == colormap ]]; then
				if [[ -v _COMMON_OPT[color] ]]; then #!SC2102
					echo "# grey,red,green,yellow,blue,magenta,cyan,light*7,white,neutral"
					echo "${l}${key} = ${_COMMON_OPT[colormap]//[a-z:]/}"
				fi
			elif [[ ${_COMMON_OPT[${key}]} =~ (^\ |\ $) ]]; then
				# quotes only needed if spaces are at end/start
				echo "${l}${key} = \"${_COMMON_OPT[${key}]#*:}\""
			else
				if [[ ${_COMMON_OPT[${key}]#*:} ]]; then
					echo "${l}${key} = ${_COMMON_OPT[${key}]#*:}"
				else
					echo "${l}${key} ="
				fi
			fi
		done >&"${_COMMON_MSG_STD:-1}"
		exit
	fi

	for key in "${!_COMMON_OPT[@]}"; do
		[[ ${key} != colormap ]] || continue
		O[${key}]=${_COMMON_OPT[${key}]#*:}
	done

	for val in ${_COMMON_OPT[colormap]#*:}; do
		if [[ ${O[color]:-} == true ]]; then
			printf -v "C[${val%%[0-9]*}]" "\e[${val##*[a-z]}m"
		else
			C[${val%%[0-9]*}]= #!SC2034
		fi
	done

	unset _COMMON_OPT _COMMON_OPT_NO _COMMON_OPT_SHORT _COMMON_OPT_SHORT_R
}

# optauto <array> <args...> << (depend:getopt)
#	Combines opt* and getoptw(), see optstart().
#	Named [array] will store remaining arguments, see getoptw().
#	On top of defined options, will add:
#		-h|--help, --version, --confdir=PATH, --dumpconfig
#	Options prefixed by ! (i.e. s|!long=) will add --no-*
optauto() {
	optstart

	# need to be more careful with namespaces not to mask ${1} array
	local _c_key _c_hasarg _c_short=h _c_long=help,version,confdir:,dumpconfig
	for _c_key in "${_COMMON_OPT_SORT[@]}"; do
		# note: undocumented but no reason to skip --colormap if enabled
		[[ ${_c_key} != colormap || ${_COMMON_OPT[color]:-} ]] || continue
		[[ ${_COMMON_OPT[${_c_key}]} =~ ^bool:|^ignore$ ]] && _c_hasarg= || _c_hasarg=:
		[[ -v _COMMON_OPT_NO[${_c_key}] ]] && _c_long+=,no-${_c_key} || _c_long+=,${_c_key}${_c_hasarg}
		_c_short+=${_COMMON_OPT_SHORT[${_c_key}]:+${_COMMON_OPT_SHORT[${_c_key}]}${_c_hasarg}}
	done

	local _c_arg _c_prev
	getoptw _c_arg "${1}" "${_c_short}" "${_c_long}" "${@:2}"
	while getoptw; do
		case "${_c_arg}" in
			-h|--help) usage;;
			--version) version;;
			--confdir) getoptw; optsetconf "${_c_arg}";;
			--dumpconfig) optend -d;;
			-?) _c_arg=${_COMMON_OPT_SHORT_R[${_c_arg#-}]};&
			*)
				_c_arg=${_c_arg#--}
				_c_arg=${_c_arg#no-}
				if [[ ${_COMMON_OPT[${_c_arg}]} =~ ^([%@])?bool:(.*) ]]; then
					if [[ ${BASH_REMATCH[1]} != % ]]; then
						if [[ ${BASH_REMATCH[2]} == true ]]; then
							optset "${_c_arg}" false
						else
							optset "${_c_arg}" true
						fi
					fi
				elif [[ ${_COMMON_OPT[${_c_arg}]} =~ ^[%@]?ignore(:?) ]]; then
					[[ ! ${BASH_REMATCH[1]} ]] || getoptw
				else
					_c_prev=${_c_arg}; getoptw
					optset "${_c_prev}" "${_c_arg}"
				fi
			;;
		esac
	done

	optend
}

# printarray <array>
#	Echoes named <array> elements on separate lines, or nothing if empty.
printarray() {
	local -n _c_inref=${1}
	(( ! ${#_c_inref[@]} )) || printf "%s\n" "${_c_inref[@]}"
}

# setmsg [12] [format]
#	Set how to output messages from msg() and msgf(), e.g. to add
#	a prefix or always use stderr (default: 1(stdout) '%s').
#	If IWCOMMON_MSG_STD_FORCE is set to 1 or 2, enforce over arguments
#	Use enforcing with care, only intended for capturing usage/config
#	without risking error messages and may break normal use.
_COMMON_MSG_FMT=%s
_COMMON_MSG_STD=1
setmsg() {
	if [[ ${1} == [12] ]]; then
		[[ ${IWCOMMON_MSG_STD_FORCE:-} == [12] ]] &&
			_COMMON_MSG_STD=${IWCOMMON_MSG_STD_FORCE} ||
			_COMMON_MSG_STD=${1}
		shift
	fi
	(( ! ${#} )) || _COMMON_MSG_FMT=${1}
}

# split [+]<array> <string> [IFS]
#	Wrapper to split-() to act on <string> rather than stdin.
split() {
	split- "${1}" ${3+"${3}"} <<<"${2}"
}

# split- [+]<array> [IFS]
#	Split stdin into <array> based on IFS (default IFS=' ')
#	If + is set, add to array rather than replace it.
split-() {
	if [[ ${1::1} == + ]]; then
		local -n _c_outref=${1#+} #!SC2178
		local -a _c_split
		IFS=${2-' '} read -ra _c_split
		_c_outref+=("${_c_split[@]}")
	else
		IFS=${2-' '} read -ra "${1}"
	fi
}

# showline <lineno> <source> [format]
#	Echoes line(s) at, may be multiple lines if terminated by \
#	Format can contain one %d for line number, then %s for the line.
#	Return 1 if failed to read source file
showline() {
	local d= format=${3:-%03d: %s}
	local -a source output

	[[ ${format} =~ %+[0-9.-]*d ]] || unset d

	mapfile -tn "${1}" source < "${2}" || return 1

	output=(${d+${1}} "${source[${1} - 1]//$'\t'/    }")

	local -i i
	for ((i=${1} - 1; --i >= 0;)); do
		[[ ${source[i]} =~ \\$ ]] || break
		output=(${d+$((i+1))} "${source[i]//$'\t'/    }" "${output[@]}")
	done

	printf "${format}\n" "${output[@]}"
}

# usage [<<]
#	Read stdin for usage, a subsequent call displays it using std output
#	from setmsg() then exit.
unset _COMMON_USAGE
usage() {
	if [[ ! -v _COMMON_USAGE ]]; then
		mapfile _COMMON_USAGE
		return 0
	fi
	printf %s "${_COMMON_USAGE[@]}" >&"${_COMMON_MSG_STD:-1}"
	exit 0
}

# version
#	Show version using std output from setmsg() then exit
version() {
	echo "${0##*/} @version@" >&"${_COMMON_MSG_STD:-1}"
	exit 0
}

# vim: ts=4
